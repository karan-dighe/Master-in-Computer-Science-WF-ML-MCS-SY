Write a Java Program to implement command pattern to test Remote Control.
Ans:



interface Command {
public void execute();
}
class Light {
public void on() {
System.out.println("Light is on");
}
public void off() {
System.out.println("Light is off");
}
}
class LightOnCommand implements Command {
Light l1;
public LightOnCommand(Light a) {
this.l1 = a;
}
public void execute() {
l1.on();
}
}
class LightOffCommand implements Command {
Light l1;
public LightOffCommand(Light a) {
this.l1 = a;
}
public void execute() {
l1.off();
}
}
class SimpleRemoteControl {
Command slot;
public SimpleRemoteControl() {
}
public void setCommand(Command command) {
slot = command;
}
public void buttonWasPressed() {
slot.execute();
}
}
public class Main {
public static void main(String[] args) {
SimpleRemoteControl r1 = new SimpleRemoteControl();
Light l1 = new Light();
LightOnCommand lo = new LightOnCommand(l1);
r1.setCommand(lo);
r1.buttonWasPressed();
LightOffCommand lO = new LightOffCommand(l1);
r1.setCommand(lO);
r1.buttonWasPressed();
}
}



Write a python program to implement Polynomial Linear Regression for given
dataset
 Ans : 
 
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
datas = pd.read_csv('data.csv')
datas
X = datas.iloc[:, 1:2].values
y = datas.iloc[:, 2].values
from sklearn.linear_model import LinearRegression
lin = LinearRegression()
lin.fit(X, y)
from sklearn.preprocessing import PolynomialFeatures
poly = PolynomialFeatures(degree = 4)
X_poly = poly.fit_transform(X)
poly.fit(X_poly, y)
lin2 = LinearRegression()
lin2.fit(X_poly, y)
plt.scatter(X, y, color = 'blue')
plt.plot(X, lin.predict(X), color = 'red')
plt.title('Linear Regression')
plt.xlabel('Temperature')
plt.ylabel('Pressure')
plt.show()



Create a Node.js file that opens the requested file and returns the content
 to the client. If anything goes wrong, throw a 404 error.
Ans:
error.js


var http = require('http');
var url = require('url');
var fs = require('fs');
http.createServer(function (req, res) {
 var q = url.parse(req.url, true);
 var filename = "." + q.pathname;
 fs.readFile(filename, function(err, data) {
 if (err) {
 res.writeHead(404, {'Content-Type': 'text/html'});
 return res.end("404 Not Found");
 }
 res.writeHead(200, {'Content-Type': 'text/html'});
 res.write(data);
 return res.end();
 });
}).listen(8080);
